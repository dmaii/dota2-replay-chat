// Code generated by protoc-gen-go.
// source: dota_commonmessages.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EDOTAChatWheelMessage int32

const (
	EDOTAChatWheelMessage_k_EDOTA_CW_Ok                  EDOTAChatWheelMessage = 0
	EDOTAChatWheelMessage_k_EDOTA_CW_Care                EDOTAChatWheelMessage = 1
	EDOTAChatWheelMessage_k_EDOTA_CW_GetBack             EDOTAChatWheelMessage = 2
	EDOTAChatWheelMessage_k_EDOTA_CW_NeedWards           EDOTAChatWheelMessage = 3
	EDOTAChatWheelMessage_k_EDOTA_CW_Stun                EDOTAChatWheelMessage = 4
	EDOTAChatWheelMessage_k_EDOTA_CW_Help                EDOTAChatWheelMessage = 5
	EDOTAChatWheelMessage_k_EDOTA_CW_Push                EDOTAChatWheelMessage = 6
	EDOTAChatWheelMessage_k_EDOTA_CW_GoodJob             EDOTAChatWheelMessage = 7
	EDOTAChatWheelMessage_k_EDOTA_CW_Missing             EDOTAChatWheelMessage = 8
	EDOTAChatWheelMessage_k_EDOTA_CW_Missing_Top         EDOTAChatWheelMessage = 9
	EDOTAChatWheelMessage_k_EDOTA_CW_Missing_Mid         EDOTAChatWheelMessage = 10
	EDOTAChatWheelMessage_k_EDOTA_CW_Missing_Bottom      EDOTAChatWheelMessage = 11
	EDOTAChatWheelMessage_k_EDOTA_CW_Go                  EDOTAChatWheelMessage = 12
	EDOTAChatWheelMessage_k_EDOTA_CW_Initiate            EDOTAChatWheelMessage = 13
	EDOTAChatWheelMessage_k_EDOTA_CW_Follow              EDOTAChatWheelMessage = 14
	EDOTAChatWheelMessage_k_EDOTA_CW_Group_Up            EDOTAChatWheelMessage = 15
	EDOTAChatWheelMessage_k_EDOTA_CW_Spread_Out          EDOTAChatWheelMessage = 16
	EDOTAChatWheelMessage_k_EDOTA_CW_Split_Farm          EDOTAChatWheelMessage = 17
	EDOTAChatWheelMessage_k_EDOTA_CW_Attack              EDOTAChatWheelMessage = 18
	EDOTAChatWheelMessage_k_EDOTA_CW_BRB                 EDOTAChatWheelMessage = 19
	EDOTAChatWheelMessage_k_EDOTA_CW_Dive                EDOTAChatWheelMessage = 20
	EDOTAChatWheelMessage_k_EDOTA_CW_OMW                 EDOTAChatWheelMessage = 21
	EDOTAChatWheelMessage_k_EDOTA_CW_Get_Ready           EDOTAChatWheelMessage = 22
	EDOTAChatWheelMessage_k_EDOTA_CW_Bait                EDOTAChatWheelMessage = 23
	EDOTAChatWheelMessage_k_EDOTA_CW_Heal                EDOTAChatWheelMessage = 24
	EDOTAChatWheelMessage_k_EDOTA_CW_Mana                EDOTAChatWheelMessage = 25
	EDOTAChatWheelMessage_k_EDOTA_CW_OOM                 EDOTAChatWheelMessage = 26
	EDOTAChatWheelMessage_k_EDOTA_CW_Skill_Cooldown      EDOTAChatWheelMessage = 27
	EDOTAChatWheelMessage_k_EDOTA_CW_Ulti_Ready          EDOTAChatWheelMessage = 28
	EDOTAChatWheelMessage_k_EDOTA_CW_Enemy_Returned      EDOTAChatWheelMessage = 29
	EDOTAChatWheelMessage_k_EDOTA_CW_All_Missing         EDOTAChatWheelMessage = 30
	EDOTAChatWheelMessage_k_EDOTA_CW_Enemy_Incoming      EDOTAChatWheelMessage = 31
	EDOTAChatWheelMessage_k_EDOTA_CW_Invis_Enemy         EDOTAChatWheelMessage = 32
	EDOTAChatWheelMessage_k_EDOTA_CW_Enemy_Had_Rune      EDOTAChatWheelMessage = 33
	EDOTAChatWheelMessage_k_EDOTA_CW_Split_Push          EDOTAChatWheelMessage = 34
	EDOTAChatWheelMessage_k_EDOTA_CW_Coming_To_Gank      EDOTAChatWheelMessage = 35
	EDOTAChatWheelMessage_k_EDOTA_CW_Request_Gank        EDOTAChatWheelMessage = 36
	EDOTAChatWheelMessage_k_EDOTA_CW_Fight_Under_Tower   EDOTAChatWheelMessage = 37
	EDOTAChatWheelMessage_k_EDOTA_CW_Deny_Tower          EDOTAChatWheelMessage = 38
	EDOTAChatWheelMessage_k_EDOTA_CW_Buy_Courier         EDOTAChatWheelMessage = 39
	EDOTAChatWheelMessage_k_EDOTA_CW_Upgrade_Courier     EDOTAChatWheelMessage = 40
	EDOTAChatWheelMessage_k_EDOTA_CW_Need_Detection      EDOTAChatWheelMessage = 41
	EDOTAChatWheelMessage_k_EDOTA_CW_They_Have_Detection EDOTAChatWheelMessage = 42
	EDOTAChatWheelMessage_k_EDOTA_CW_Buy_TP              EDOTAChatWheelMessage = 43
	EDOTAChatWheelMessage_k_EDOTA_CW_Reuse_Courier       EDOTAChatWheelMessage = 44
	EDOTAChatWheelMessage_k_EDOTA_CW_Deward              EDOTAChatWheelMessage = 45
	EDOTAChatWheelMessage_k_EDOTA_CW_Building_Mek        EDOTAChatWheelMessage = 46
	EDOTAChatWheelMessage_k_EDOTA_CW_Building_Pipe       EDOTAChatWheelMessage = 47
	EDOTAChatWheelMessage_k_EDOTA_CW_Stack_And_Pull      EDOTAChatWheelMessage = 48
	EDOTAChatWheelMessage_k_EDOTA_CW_Pull                EDOTAChatWheelMessage = 49
	EDOTAChatWheelMessage_k_EDOTA_CW_Pulling             EDOTAChatWheelMessage = 50
	EDOTAChatWheelMessage_k_EDOTA_CW_Stack               EDOTAChatWheelMessage = 51
	EDOTAChatWheelMessage_k_EDOTA_CW_Jungling            EDOTAChatWheelMessage = 52
	EDOTAChatWheelMessage_k_EDOTA_CW_Roshan              EDOTAChatWheelMessage = 53
	EDOTAChatWheelMessage_k_EDOTA_CW_Affirmative         EDOTAChatWheelMessage = 54
	EDOTAChatWheelMessage_k_EDOTA_CW_Wait                EDOTAChatWheelMessage = 55
	EDOTAChatWheelMessage_k_EDOTA_CW_Pause               EDOTAChatWheelMessage = 56
	EDOTAChatWheelMessage_k_EDOTA_CW_Current_Time        EDOTAChatWheelMessage = 57
	EDOTAChatWheelMessage_k_EDOTA_CW_Check_Runes         EDOTAChatWheelMessage = 58
	EDOTAChatWheelMessage_k_EDOTA_CW_Smoke_Gank          EDOTAChatWheelMessage = 59
	EDOTAChatWheelMessage_k_EDOTA_CW_GLHF                EDOTAChatWheelMessage = 60
	EDOTAChatWheelMessage_k_EDOTA_CW_Nice                EDOTAChatWheelMessage = 61
	EDOTAChatWheelMessage_k_EDOTA_CW_Thanks              EDOTAChatWheelMessage = 62
	EDOTAChatWheelMessage_k_EDOTA_CW_Sorry               EDOTAChatWheelMessage = 63
	EDOTAChatWheelMessage_k_EDOTA_CW_No_Give_Up          EDOTAChatWheelMessage = 64
	EDOTAChatWheelMessage_k_EDOTA_CW_Just_Happened       EDOTAChatWheelMessage = 65
	EDOTAChatWheelMessage_k_EDOTA_CW_Game_Is_Hard        EDOTAChatWheelMessage = 66
	EDOTAChatWheelMessage_k_EDOTA_CW_New_Meta            EDOTAChatWheelMessage = 67
	EDOTAChatWheelMessage_k_EDOTA_CW_My_Bad              EDOTAChatWheelMessage = 68
	EDOTAChatWheelMessage_k_EDOTA_CW_Regret              EDOTAChatWheelMessage = 69
	EDOTAChatWheelMessage_k_EDOTA_CW_Relax               EDOTAChatWheelMessage = 70
	EDOTAChatWheelMessage_k_EDOTA_CW_MissingHero         EDOTAChatWheelMessage = 71
	EDOTAChatWheelMessage_k_EDOTA_CW_ReturnedHero        EDOTAChatWheelMessage = 72
	EDOTAChatWheelMessage_k_EDOTA_CW_GG                  EDOTAChatWheelMessage = 73
	EDOTAChatWheelMessage_k_EDOTA_CW_GGWP                EDOTAChatWheelMessage = 74
	EDOTAChatWheelMessage_k_EDOTA_CW_All_GG              EDOTAChatWheelMessage = 75
	EDOTAChatWheelMessage_k_EDOTA_CW_All_GGWP            EDOTAChatWheelMessage = 76
	EDOTAChatWheelMessage_k_EDOTA_CW_What_To_Buy         EDOTAChatWheelMessage = 77
	EDOTAChatWheelMessage_k_EDOTA_CW_Im_Retreating       EDOTAChatWheelMessage = 78
	EDOTAChatWheelMessage_k_EDOTA_CW_Space_Created       EDOTAChatWheelMessage = 79
	EDOTAChatWheelMessage_k_EDOTA_CW_Whoops              EDOTAChatWheelMessage = 80
	EDOTAChatWheelMessage_k_EDOTA_CW_Tower_then_Back     EDOTAChatWheelMessage = 81
	EDOTAChatWheelMessage_k_EDOTA_CW_Barracks_then_Back  EDOTAChatWheelMessage = 82
	EDOTAChatWheelMessage_k_EDOTA_CW_Ward_Bottom_Rune    EDOTAChatWheelMessage = 83
	EDOTAChatWheelMessage_k_EDOTA_CW_Ward_Top_Rune       EDOTAChatWheelMessage = 84
	EDOTAChatWheelMessage_k_EDOTA_CW_Zeus_Ult            EDOTAChatWheelMessage = 85
)

var EDOTAChatWheelMessage_name = map[int32]string{
	0:  "k_EDOTA_CW_Ok",
	1:  "k_EDOTA_CW_Care",
	2:  "k_EDOTA_CW_GetBack",
	3:  "k_EDOTA_CW_NeedWards",
	4:  "k_EDOTA_CW_Stun",
	5:  "k_EDOTA_CW_Help",
	6:  "k_EDOTA_CW_Push",
	7:  "k_EDOTA_CW_GoodJob",
	8:  "k_EDOTA_CW_Missing",
	9:  "k_EDOTA_CW_Missing_Top",
	10: "k_EDOTA_CW_Missing_Mid",
	11: "k_EDOTA_CW_Missing_Bottom",
	12: "k_EDOTA_CW_Go",
	13: "k_EDOTA_CW_Initiate",
	14: "k_EDOTA_CW_Follow",
	15: "k_EDOTA_CW_Group_Up",
	16: "k_EDOTA_CW_Spread_Out",
	17: "k_EDOTA_CW_Split_Farm",
	18: "k_EDOTA_CW_Attack",
	19: "k_EDOTA_CW_BRB",
	20: "k_EDOTA_CW_Dive",
	21: "k_EDOTA_CW_OMW",
	22: "k_EDOTA_CW_Get_Ready",
	23: "k_EDOTA_CW_Bait",
	24: "k_EDOTA_CW_Heal",
	25: "k_EDOTA_CW_Mana",
	26: "k_EDOTA_CW_OOM",
	27: "k_EDOTA_CW_Skill_Cooldown",
	28: "k_EDOTA_CW_Ulti_Ready",
	29: "k_EDOTA_CW_Enemy_Returned",
	30: "k_EDOTA_CW_All_Missing",
	31: "k_EDOTA_CW_Enemy_Incoming",
	32: "k_EDOTA_CW_Invis_Enemy",
	33: "k_EDOTA_CW_Enemy_Had_Rune",
	34: "k_EDOTA_CW_Split_Push",
	35: "k_EDOTA_CW_Coming_To_Gank",
	36: "k_EDOTA_CW_Request_Gank",
	37: "k_EDOTA_CW_Fight_Under_Tower",
	38: "k_EDOTA_CW_Deny_Tower",
	39: "k_EDOTA_CW_Buy_Courier",
	40: "k_EDOTA_CW_Upgrade_Courier",
	41: "k_EDOTA_CW_Need_Detection",
	42: "k_EDOTA_CW_They_Have_Detection",
	43: "k_EDOTA_CW_Buy_TP",
	44: "k_EDOTA_CW_Reuse_Courier",
	45: "k_EDOTA_CW_Deward",
	46: "k_EDOTA_CW_Building_Mek",
	47: "k_EDOTA_CW_Building_Pipe",
	48: "k_EDOTA_CW_Stack_And_Pull",
	49: "k_EDOTA_CW_Pull",
	50: "k_EDOTA_CW_Pulling",
	51: "k_EDOTA_CW_Stack",
	52: "k_EDOTA_CW_Jungling",
	53: "k_EDOTA_CW_Roshan",
	54: "k_EDOTA_CW_Affirmative",
	55: "k_EDOTA_CW_Wait",
	56: "k_EDOTA_CW_Pause",
	57: "k_EDOTA_CW_Current_Time",
	58: "k_EDOTA_CW_Check_Runes",
	59: "k_EDOTA_CW_Smoke_Gank",
	60: "k_EDOTA_CW_GLHF",
	61: "k_EDOTA_CW_Nice",
	62: "k_EDOTA_CW_Thanks",
	63: "k_EDOTA_CW_Sorry",
	64: "k_EDOTA_CW_No_Give_Up",
	65: "k_EDOTA_CW_Just_Happened",
	66: "k_EDOTA_CW_Game_Is_Hard",
	67: "k_EDOTA_CW_New_Meta",
	68: "k_EDOTA_CW_My_Bad",
	69: "k_EDOTA_CW_Regret",
	70: "k_EDOTA_CW_Relax",
	71: "k_EDOTA_CW_MissingHero",
	72: "k_EDOTA_CW_ReturnedHero",
	73: "k_EDOTA_CW_GG",
	74: "k_EDOTA_CW_GGWP",
	75: "k_EDOTA_CW_All_GG",
	76: "k_EDOTA_CW_All_GGWP",
	77: "k_EDOTA_CW_What_To_Buy",
	78: "k_EDOTA_CW_Im_Retreating",
	79: "k_EDOTA_CW_Space_Created",
	80: "k_EDOTA_CW_Whoops",
	81: "k_EDOTA_CW_Tower_then_Back",
	82: "k_EDOTA_CW_Barracks_then_Back",
	83: "k_EDOTA_CW_Ward_Bottom_Rune",
	84: "k_EDOTA_CW_Ward_Top_Rune",
	85: "k_EDOTA_CW_Zeus_Ult",
}
var EDOTAChatWheelMessage_value = map[string]int32{
	"k_EDOTA_CW_Ok":                  0,
	"k_EDOTA_CW_Care":                1,
	"k_EDOTA_CW_GetBack":             2,
	"k_EDOTA_CW_NeedWards":           3,
	"k_EDOTA_CW_Stun":                4,
	"k_EDOTA_CW_Help":                5,
	"k_EDOTA_CW_Push":                6,
	"k_EDOTA_CW_GoodJob":             7,
	"k_EDOTA_CW_Missing":             8,
	"k_EDOTA_CW_Missing_Top":         9,
	"k_EDOTA_CW_Missing_Mid":         10,
	"k_EDOTA_CW_Missing_Bottom":      11,
	"k_EDOTA_CW_Go":                  12,
	"k_EDOTA_CW_Initiate":            13,
	"k_EDOTA_CW_Follow":              14,
	"k_EDOTA_CW_Group_Up":            15,
	"k_EDOTA_CW_Spread_Out":          16,
	"k_EDOTA_CW_Split_Farm":          17,
	"k_EDOTA_CW_Attack":              18,
	"k_EDOTA_CW_BRB":                 19,
	"k_EDOTA_CW_Dive":                20,
	"k_EDOTA_CW_OMW":                 21,
	"k_EDOTA_CW_Get_Ready":           22,
	"k_EDOTA_CW_Bait":                23,
	"k_EDOTA_CW_Heal":                24,
	"k_EDOTA_CW_Mana":                25,
	"k_EDOTA_CW_OOM":                 26,
	"k_EDOTA_CW_Skill_Cooldown":      27,
	"k_EDOTA_CW_Ulti_Ready":          28,
	"k_EDOTA_CW_Enemy_Returned":      29,
	"k_EDOTA_CW_All_Missing":         30,
	"k_EDOTA_CW_Enemy_Incoming":      31,
	"k_EDOTA_CW_Invis_Enemy":         32,
	"k_EDOTA_CW_Enemy_Had_Rune":      33,
	"k_EDOTA_CW_Split_Push":          34,
	"k_EDOTA_CW_Coming_To_Gank":      35,
	"k_EDOTA_CW_Request_Gank":        36,
	"k_EDOTA_CW_Fight_Under_Tower":   37,
	"k_EDOTA_CW_Deny_Tower":          38,
	"k_EDOTA_CW_Buy_Courier":         39,
	"k_EDOTA_CW_Upgrade_Courier":     40,
	"k_EDOTA_CW_Need_Detection":      41,
	"k_EDOTA_CW_They_Have_Detection": 42,
	"k_EDOTA_CW_Buy_TP":              43,
	"k_EDOTA_CW_Reuse_Courier":       44,
	"k_EDOTA_CW_Deward":              45,
	"k_EDOTA_CW_Building_Mek":        46,
	"k_EDOTA_CW_Building_Pipe":       47,
	"k_EDOTA_CW_Stack_And_Pull":      48,
	"k_EDOTA_CW_Pull":                49,
	"k_EDOTA_CW_Pulling":             50,
	"k_EDOTA_CW_Stack":               51,
	"k_EDOTA_CW_Jungling":            52,
	"k_EDOTA_CW_Roshan":              53,
	"k_EDOTA_CW_Affirmative":         54,
	"k_EDOTA_CW_Wait":                55,
	"k_EDOTA_CW_Pause":               56,
	"k_EDOTA_CW_Current_Time":        57,
	"k_EDOTA_CW_Check_Runes":         58,
	"k_EDOTA_CW_Smoke_Gank":          59,
	"k_EDOTA_CW_GLHF":                60,
	"k_EDOTA_CW_Nice":                61,
	"k_EDOTA_CW_Thanks":              62,
	"k_EDOTA_CW_Sorry":               63,
	"k_EDOTA_CW_No_Give_Up":          64,
	"k_EDOTA_CW_Just_Happened":       65,
	"k_EDOTA_CW_Game_Is_Hard":        66,
	"k_EDOTA_CW_New_Meta":            67,
	"k_EDOTA_CW_My_Bad":              68,
	"k_EDOTA_CW_Regret":              69,
	"k_EDOTA_CW_Relax":               70,
	"k_EDOTA_CW_MissingHero":         71,
	"k_EDOTA_CW_ReturnedHero":        72,
	"k_EDOTA_CW_GG":                  73,
	"k_EDOTA_CW_GGWP":                74,
	"k_EDOTA_CW_All_GG":              75,
	"k_EDOTA_CW_All_GGWP":            76,
	"k_EDOTA_CW_What_To_Buy":         77,
	"k_EDOTA_CW_Im_Retreating":       78,
	"k_EDOTA_CW_Space_Created":       79,
	"k_EDOTA_CW_Whoops":              80,
	"k_EDOTA_CW_Tower_then_Back":     81,
	"k_EDOTA_CW_Barracks_then_Back":  82,
	"k_EDOTA_CW_Ward_Bottom_Rune":    83,
	"k_EDOTA_CW_Ward_Top_Rune":       84,
	"k_EDOTA_CW_Zeus_Ult":            85,
}

func (x EDOTAChatWheelMessage) Enum() *EDOTAChatWheelMessage {
	p := new(EDOTAChatWheelMessage)
	*p = x
	return p
}
func (x EDOTAChatWheelMessage) String() string {
	return proto.EnumName(EDOTAChatWheelMessage_name, int32(x))
}
func (x *EDOTAChatWheelMessage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAChatWheelMessage_value, data, "EDOTAChatWheelMessage")
	if err != nil {
		return err
	}
	*x = EDOTAChatWheelMessage(value)
	return nil
}
func (EDOTAChatWheelMessage) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type EDOTAStatPopupTypes int32

const (
	EDOTAStatPopupTypes_k_EDOTA_SPT_Textline EDOTAStatPopupTypes = 0
	EDOTAStatPopupTypes_k_EDOTA_SPT_Basic    EDOTAStatPopupTypes = 1
	EDOTAStatPopupTypes_k_EDOTA_SPT_Poll     EDOTAStatPopupTypes = 2
	EDOTAStatPopupTypes_k_EDOTA_SPT_Grid     EDOTAStatPopupTypes = 3
)

var EDOTAStatPopupTypes_name = map[int32]string{
	0: "k_EDOTA_SPT_Textline",
	1: "k_EDOTA_SPT_Basic",
	2: "k_EDOTA_SPT_Poll",
	3: "k_EDOTA_SPT_Grid",
}
var EDOTAStatPopupTypes_value = map[string]int32{
	"k_EDOTA_SPT_Textline": 0,
	"k_EDOTA_SPT_Basic":    1,
	"k_EDOTA_SPT_Poll":     2,
	"k_EDOTA_SPT_Grid":     3,
}

func (x EDOTAStatPopupTypes) Enum() *EDOTAStatPopupTypes {
	p := new(EDOTAStatPopupTypes)
	*p = x
	return p
}
func (x EDOTAStatPopupTypes) String() string {
	return proto.EnumName(EDOTAStatPopupTypes_name, int32(x))
}
func (x *EDOTAStatPopupTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EDOTAStatPopupTypes_value, data, "EDOTAStatPopupTypes")
	if err != nil {
		return err
	}
	*x = EDOTAStatPopupTypes(value)
	return nil
}
func (EDOTAStatPopupTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

type DotaunitorderT int32

const (
	DotaunitorderT_DOTA_UNIT_ORDER_NONE                   DotaunitorderT = 0
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_TO_POSITION       DotaunitorderT = 1
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_TO_TARGET         DotaunitorderT = 2
	DotaunitorderT_DOTA_UNIT_ORDER_ATTACK_MOVE            DotaunitorderT = 3
	DotaunitorderT_DOTA_UNIT_ORDER_ATTACK_TARGET          DotaunitorderT = 4
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_POSITION          DotaunitorderT = 5
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TARGET            DotaunitorderT = 6
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TARGET_TREE       DotaunitorderT = 7
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_NO_TARGET         DotaunitorderT = 8
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TOGGLE            DotaunitorderT = 9
	DotaunitorderT_DOTA_UNIT_ORDER_HOLD_POSITION          DotaunitorderT = 10
	DotaunitorderT_DOTA_UNIT_ORDER_TRAIN_ABILITY          DotaunitorderT = 11
	DotaunitorderT_DOTA_UNIT_ORDER_DROP_ITEM              DotaunitorderT = 12
	DotaunitorderT_DOTA_UNIT_ORDER_GIVE_ITEM              DotaunitorderT = 13
	DotaunitorderT_DOTA_UNIT_ORDER_PICKUP_ITEM            DotaunitorderT = 14
	DotaunitorderT_DOTA_UNIT_ORDER_PICKUP_RUNE            DotaunitorderT = 15
	DotaunitorderT_DOTA_UNIT_ORDER_PURCHASE_ITEM          DotaunitorderT = 16
	DotaunitorderT_DOTA_UNIT_ORDER_SELL_ITEM              DotaunitorderT = 17
	DotaunitorderT_DOTA_UNIT_ORDER_DISASSEMBLE_ITEM       DotaunitorderT = 18
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_ITEM              DotaunitorderT = 19
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO       DotaunitorderT = 20
	DotaunitorderT_DOTA_UNIT_ORDER_STOP                   DotaunitorderT = 21
	DotaunitorderT_DOTA_UNIT_ORDER_TAUNT                  DotaunitorderT = 22
	DotaunitorderT_DOTA_UNIT_ORDER_BUYBACK                DotaunitorderT = 23
	DotaunitorderT_DOTA_UNIT_ORDER_GLYPH                  DotaunitorderT = 24
	DotaunitorderT_DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH  DotaunitorderT = 25
	DotaunitorderT_DOTA_UNIT_ORDER_CAST_RUNE              DotaunitorderT = 26
	DotaunitorderT_DOTA_UNIT_ORDER_PING_ABILITY           DotaunitorderT = 27
	DotaunitorderT_DOTA_UNIT_ORDER_MOVE_TO_DIRECTION      DotaunitorderT = 28
	DotaunitorderT_DOTA_UNIT_ORDER_PATROL                 DotaunitorderT = 29
	DotaunitorderT_DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION DotaunitorderT = 30
	DotaunitorderT_DOTA_UNIT_ORDER_RADAR                  DotaunitorderT = 31
	DotaunitorderT_DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK  DotaunitorderT = 32
	DotaunitorderT_DOTA_UNIT_ORDER_CONTINUE               DotaunitorderT = 33
)

var DotaunitorderT_name = map[int32]string{
	0:  "DOTA_UNIT_ORDER_NONE",
	1:  "DOTA_UNIT_ORDER_MOVE_TO_POSITION",
	2:  "DOTA_UNIT_ORDER_MOVE_TO_TARGET",
	3:  "DOTA_UNIT_ORDER_ATTACK_MOVE",
	4:  "DOTA_UNIT_ORDER_ATTACK_TARGET",
	5:  "DOTA_UNIT_ORDER_CAST_POSITION",
	6:  "DOTA_UNIT_ORDER_CAST_TARGET",
	7:  "DOTA_UNIT_ORDER_CAST_TARGET_TREE",
	8:  "DOTA_UNIT_ORDER_CAST_NO_TARGET",
	9:  "DOTA_UNIT_ORDER_CAST_TOGGLE",
	10: "DOTA_UNIT_ORDER_HOLD_POSITION",
	11: "DOTA_UNIT_ORDER_TRAIN_ABILITY",
	12: "DOTA_UNIT_ORDER_DROP_ITEM",
	13: "DOTA_UNIT_ORDER_GIVE_ITEM",
	14: "DOTA_UNIT_ORDER_PICKUP_ITEM",
	15: "DOTA_UNIT_ORDER_PICKUP_RUNE",
	16: "DOTA_UNIT_ORDER_PURCHASE_ITEM",
	17: "DOTA_UNIT_ORDER_SELL_ITEM",
	18: "DOTA_UNIT_ORDER_DISASSEMBLE_ITEM",
	19: "DOTA_UNIT_ORDER_MOVE_ITEM",
	20: "DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO",
	21: "DOTA_UNIT_ORDER_STOP",
	22: "DOTA_UNIT_ORDER_TAUNT",
	23: "DOTA_UNIT_ORDER_BUYBACK",
	24: "DOTA_UNIT_ORDER_GLYPH",
	25: "DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH",
	26: "DOTA_UNIT_ORDER_CAST_RUNE",
	27: "DOTA_UNIT_ORDER_PING_ABILITY",
	28: "DOTA_UNIT_ORDER_MOVE_TO_DIRECTION",
	29: "DOTA_UNIT_ORDER_PATROL",
	30: "DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION",
	31: "DOTA_UNIT_ORDER_RADAR",
	32: "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK",
	33: "DOTA_UNIT_ORDER_CONTINUE",
}
var DotaunitorderT_value = map[string]int32{
	"DOTA_UNIT_ORDER_NONE":                   0,
	"DOTA_UNIT_ORDER_MOVE_TO_POSITION":       1,
	"DOTA_UNIT_ORDER_MOVE_TO_TARGET":         2,
	"DOTA_UNIT_ORDER_ATTACK_MOVE":            3,
	"DOTA_UNIT_ORDER_ATTACK_TARGET":          4,
	"DOTA_UNIT_ORDER_CAST_POSITION":          5,
	"DOTA_UNIT_ORDER_CAST_TARGET":            6,
	"DOTA_UNIT_ORDER_CAST_TARGET_TREE":       7,
	"DOTA_UNIT_ORDER_CAST_NO_TARGET":         8,
	"DOTA_UNIT_ORDER_CAST_TOGGLE":            9,
	"DOTA_UNIT_ORDER_HOLD_POSITION":          10,
	"DOTA_UNIT_ORDER_TRAIN_ABILITY":          11,
	"DOTA_UNIT_ORDER_DROP_ITEM":              12,
	"DOTA_UNIT_ORDER_GIVE_ITEM":              13,
	"DOTA_UNIT_ORDER_PICKUP_ITEM":            14,
	"DOTA_UNIT_ORDER_PICKUP_RUNE":            15,
	"DOTA_UNIT_ORDER_PURCHASE_ITEM":          16,
	"DOTA_UNIT_ORDER_SELL_ITEM":              17,
	"DOTA_UNIT_ORDER_DISASSEMBLE_ITEM":       18,
	"DOTA_UNIT_ORDER_MOVE_ITEM":              19,
	"DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO":       20,
	"DOTA_UNIT_ORDER_STOP":                   21,
	"DOTA_UNIT_ORDER_TAUNT":                  22,
	"DOTA_UNIT_ORDER_BUYBACK":                23,
	"DOTA_UNIT_ORDER_GLYPH":                  24,
	"DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH":  25,
	"DOTA_UNIT_ORDER_CAST_RUNE":              26,
	"DOTA_UNIT_ORDER_PING_ABILITY":           27,
	"DOTA_UNIT_ORDER_MOVE_TO_DIRECTION":      28,
	"DOTA_UNIT_ORDER_PATROL":                 29,
	"DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION": 30,
	"DOTA_UNIT_ORDER_RADAR":                  31,
	"DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK":  32,
	"DOTA_UNIT_ORDER_CONTINUE":               33,
}

func (x DotaunitorderT) Enum() *DotaunitorderT {
	p := new(DotaunitorderT)
	*p = x
	return p
}
func (x DotaunitorderT) String() string {
	return proto.EnumName(DotaunitorderT_name, int32(x))
}
func (x *DotaunitorderT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DotaunitorderT_value, data, "DotaunitorderT")
	if err != nil {
		return err
	}
	*x = DotaunitorderT(value)
	return nil
}
func (DotaunitorderT) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

type CDOTAMsg_LocationPing struct {
	X                *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Target           *int32 `protobuf:"varint,3,opt,name=target" json:"target,omitempty"`
	DirectPing       *bool  `protobuf:"varint,4,opt,name=direct_ping" json:"direct_ping,omitempty"`
	Type             *int32 `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CDOTAMsg_LocationPing) Reset()                    { *m = CDOTAMsg_LocationPing{} }
func (m *CDOTAMsg_LocationPing) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_LocationPing) ProtoMessage()               {}
func (*CDOTAMsg_LocationPing) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *CDOTAMsg_LocationPing) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTAMsg_LocationPing) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CDOTAMsg_LocationPing) GetTarget() int32 {
	if m != nil && m.Target != nil {
		return *m.Target
	}
	return 0
}

func (m *CDOTAMsg_LocationPing) GetDirectPing() bool {
	if m != nil && m.DirectPing != nil {
		return *m.DirectPing
	}
	return false
}

func (m *CDOTAMsg_LocationPing) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type CDOTAMsg_ItemAlert struct {
	X                *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Itemid           *int32 `protobuf:"varint,3,opt,name=itemid" json:"itemid,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CDOTAMsg_ItemAlert) Reset()                    { *m = CDOTAMsg_ItemAlert{} }
func (m *CDOTAMsg_ItemAlert) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_ItemAlert) ProtoMessage()               {}
func (*CDOTAMsg_ItemAlert) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *CDOTAMsg_ItemAlert) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTAMsg_ItemAlert) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CDOTAMsg_ItemAlert) GetItemid() int32 {
	if m != nil && m.Itemid != nil {
		return *m.Itemid
	}
	return 0
}

type CDOTAMsg_MapLine struct {
	X                *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Initial          *bool  `protobuf:"varint,3,opt,name=initial" json:"initial,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CDOTAMsg_MapLine) Reset()                    { *m = CDOTAMsg_MapLine{} }
func (m *CDOTAMsg_MapLine) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_MapLine) ProtoMessage()               {}
func (*CDOTAMsg_MapLine) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *CDOTAMsg_MapLine) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTAMsg_MapLine) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CDOTAMsg_MapLine) GetInitial() bool {
	if m != nil && m.Initial != nil {
		return *m.Initial
	}
	return false
}

type CDOTAMsg_WorldLine struct {
	X                *int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z                *int32 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
	Initial          *bool  `protobuf:"varint,4,opt,name=initial" json:"initial,omitempty"`
	End              *bool  `protobuf:"varint,5,opt,name=end" json:"end,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CDOTAMsg_WorldLine) Reset()                    { *m = CDOTAMsg_WorldLine{} }
func (m *CDOTAMsg_WorldLine) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_WorldLine) ProtoMessage()               {}
func (*CDOTAMsg_WorldLine) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *CDOTAMsg_WorldLine) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTAMsg_WorldLine) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CDOTAMsg_WorldLine) GetZ() int32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

func (m *CDOTAMsg_WorldLine) GetInitial() bool {
	if m != nil && m.Initial != nil {
		return *m.Initial
	}
	return false
}

func (m *CDOTAMsg_WorldLine) GetEnd() bool {
	if m != nil && m.End != nil {
		return *m.End
	}
	return false
}

type CDOTAMsg_SendStatPopup struct {
	Style            *EDOTAStatPopupTypes `protobuf:"varint,1,opt,name=style,enum=dota.EDOTAStatPopupTypes,def=0" json:"style,omitempty"`
	StatStrings      []string             `protobuf:"bytes,2,rep,name=stat_strings" json:"stat_strings,omitempty"`
	StatImages       []int32              `protobuf:"varint,3,rep,name=stat_images" json:"stat_images,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CDOTAMsg_SendStatPopup) Reset()                    { *m = CDOTAMsg_SendStatPopup{} }
func (m *CDOTAMsg_SendStatPopup) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_SendStatPopup) ProtoMessage()               {}
func (*CDOTAMsg_SendStatPopup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

const Default_CDOTAMsg_SendStatPopup_Style EDOTAStatPopupTypes = EDOTAStatPopupTypes_k_EDOTA_SPT_Textline

func (m *CDOTAMsg_SendStatPopup) GetStyle() EDOTAStatPopupTypes {
	if m != nil && m.Style != nil {
		return *m.Style
	}
	return Default_CDOTAMsg_SendStatPopup_Style
}

func (m *CDOTAMsg_SendStatPopup) GetStatStrings() []string {
	if m != nil {
		return m.StatStrings
	}
	return nil
}

func (m *CDOTAMsg_SendStatPopup) GetStatImages() []int32 {
	if m != nil {
		return m.StatImages
	}
	return nil
}

type CDOTAMsg_CoachHUDPing struct {
	X                *uint32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                *uint32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Tgtpath          *string `protobuf:"bytes,3,opt,name=tgtpath" json:"tgtpath,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CDOTAMsg_CoachHUDPing) Reset()                    { *m = CDOTAMsg_CoachHUDPing{} }
func (m *CDOTAMsg_CoachHUDPing) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_CoachHUDPing) ProtoMessage()               {}
func (*CDOTAMsg_CoachHUDPing) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *CDOTAMsg_CoachHUDPing) GetX() uint32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *CDOTAMsg_CoachHUDPing) GetY() uint32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *CDOTAMsg_CoachHUDPing) GetTgtpath() string {
	if m != nil && m.Tgtpath != nil {
		return *m.Tgtpath
	}
	return ""
}

type CDOTAMsg_UnitOrder struct {
	Issuer           *int32          `protobuf:"zigzag32,1,opt,name=issuer,def=-1" json:"issuer,omitempty"`
	OrderType        *DotaunitorderT `protobuf:"varint,2,opt,name=order_type,enum=dota.DotaunitorderT,def=0" json:"order_type,omitempty"`
	Units            []int32         `protobuf:"varint,3,rep,name=units" json:"units,omitempty"`
	TargetIndex      *int32          `protobuf:"varint,4,opt,name=target_index" json:"target_index,omitempty"`
	AbilityIndex     *int32          `protobuf:"varint,5,opt,name=ability_index" json:"ability_index,omitempty"`
	Position         *CMsgVector     `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	Queue            *bool           `protobuf:"varint,7,opt,name=queue" json:"queue,omitempty"`
	SequenceNumber   *int32          `protobuf:"varint,8,opt,name=sequence_number" json:"sequence_number,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CDOTAMsg_UnitOrder) Reset()                    { *m = CDOTAMsg_UnitOrder{} }
func (m *CDOTAMsg_UnitOrder) String() string            { return proto.CompactTextString(m) }
func (*CDOTAMsg_UnitOrder) ProtoMessage()               {}
func (*CDOTAMsg_UnitOrder) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

const Default_CDOTAMsg_UnitOrder_Issuer int32 = -1
const Default_CDOTAMsg_UnitOrder_OrderType DotaunitorderT = DotaunitorderT_DOTA_UNIT_ORDER_NONE

func (m *CDOTAMsg_UnitOrder) GetIssuer() int32 {
	if m != nil && m.Issuer != nil {
		return *m.Issuer
	}
	return Default_CDOTAMsg_UnitOrder_Issuer
}

func (m *CDOTAMsg_UnitOrder) GetOrderType() DotaunitorderT {
	if m != nil && m.OrderType != nil {
		return *m.OrderType
	}
	return Default_CDOTAMsg_UnitOrder_OrderType
}

func (m *CDOTAMsg_UnitOrder) GetUnits() []int32 {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *CDOTAMsg_UnitOrder) GetTargetIndex() int32 {
	if m != nil && m.TargetIndex != nil {
		return *m.TargetIndex
	}
	return 0
}

func (m *CDOTAMsg_UnitOrder) GetAbilityIndex() int32 {
	if m != nil && m.AbilityIndex != nil {
		return *m.AbilityIndex
	}
	return 0
}

func (m *CDOTAMsg_UnitOrder) GetPosition() *CMsgVector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *CDOTAMsg_UnitOrder) GetQueue() bool {
	if m != nil && m.Queue != nil {
		return *m.Queue
	}
	return false
}

func (m *CDOTAMsg_UnitOrder) GetSequenceNumber() int32 {
	if m != nil && m.SequenceNumber != nil {
		return *m.SequenceNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*CDOTAMsg_LocationPing)(nil), "dota.CDOTAMsg_LocationPing")
	proto.RegisterType((*CDOTAMsg_ItemAlert)(nil), "dota.CDOTAMsg_ItemAlert")
	proto.RegisterType((*CDOTAMsg_MapLine)(nil), "dota.CDOTAMsg_MapLine")
	proto.RegisterType((*CDOTAMsg_WorldLine)(nil), "dota.CDOTAMsg_WorldLine")
	proto.RegisterType((*CDOTAMsg_SendStatPopup)(nil), "dota.CDOTAMsg_SendStatPopup")
	proto.RegisterType((*CDOTAMsg_CoachHUDPing)(nil), "dota.CDOTAMsg_CoachHUDPing")
	proto.RegisterType((*CDOTAMsg_UnitOrder)(nil), "dota.CDOTAMsg_UnitOrder")
	proto.RegisterEnum("dota.EDOTAChatWheelMessage", EDOTAChatWheelMessage_name, EDOTAChatWheelMessage_value)
	proto.RegisterEnum("dota.EDOTAStatPopupTypes", EDOTAStatPopupTypes_name, EDOTAStatPopupTypes_value)
	proto.RegisterEnum("dota.DotaunitorderT", DotaunitorderT_name, DotaunitorderT_value)
}

func init() { proto.RegisterFile("dota_commonmessages.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 1749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x56, 0xdd, 0x76, 0xdb, 0xb8,
	0x11, 0x8e, 0xec, 0x38, 0xb1, 0xe1, 0xd8, 0x1e, 0xc3, 0x7f, 0xb2, 0xf3, 0xb3, 0x8e, 0xba, 0xd9,
	0x7a, 0xdd, 0x6e, 0xda, 0x4d, 0x7f, 0xd7, 0x6d, 0xb3, 0xa5, 0x28, 0x5a, 0xa2, 0x2d, 0x89, 0x2a,
	0x49, 0x45, 0x27, 0xbd, 0x41, 0x11, 0x11, 0x2b, 0xe1, 0x88, 0x22, 0xb8, 0x24, 0x18, 0x47, 0xbd,
	0xea, 0x39, 0xbd, 0xe8, 0x93, 0xf5, 0x81, 0xfa, 0x06, 0x3d, 0xa0, 0x14, 0x85, 0x81, 0xe9, 0xbd,
	0xf1, 0x91, 0xe7, 0x1b, 0xcc, 0xcc, 0xf7, 0xcd, 0x60, 0x40, 0x74, 0x1c, 0x08, 0x49, 0xc9, 0x50,
	0x4c, 0xa7, 0x22, 0x9a, 0xb2, 0x34, 0xa5, 0x23, 0x96, 0xbe, 0x8c, 0x13, 0x21, 0x05, 0xbe, 0xaf,
	0xa0, 0x93, 0xc3, 0x88, 0xc9, 0x1b, 0x91, 0x4c, 0xde, 0xd1, 0x94, 0xc9, 0x59, 0xfc, 0x11, 0xad,
	0xfd, 0x03, 0x1d, 0x98, 0x0d, 0xc7, 0x37, 0x3a, 0xe9, 0x88, 0xb4, 0xc5, 0x90, 0x4a, 0x2e, 0xa2,
	0x1e, 0x8f, 0x46, 0x78, 0x03, 0x55, 0x3e, 0x54, 0x2b, 0xa7, 0x95, 0xb3, 0x35, 0xf5, 0x73, 0x56,
	0x5d, 0xc9, 0x7f, 0x6e, 0xa3, 0x07, 0x92, 0x26, 0x23, 0x26, 0xab, 0xab, 0xf9, 0xff, 0x7b, 0x68,
	0x33, 0xe0, 0x09, 0x1b, 0x4a, 0x12, 0xf3, 0x68, 0x54, 0xbd, 0x7f, 0x5a, 0x39, 0x5b, 0xc7, 0x8f,
	0xd0, 0x7d, 0x95, 0xa2, 0xba, 0xa6, 0x5c, 0x6a, 0x17, 0x08, 0x2f, 0x33, 0xd8, 0x92, 0x4d, 0x8d,
	0x90, 0x25, 0xf2, 0xee, 0xf0, 0x5c, 0xb2, 0x29, 0x0f, 0xe6, 0xe1, 0x6b, 0xdf, 0x21, 0x58, 0x9e,
	0xed, 0xd0, 0xb8, 0xcd, 0x23, 0x76, 0xc7, 0xc9, 0x1d, 0xf4, 0x90, 0x47, 0x5c, 0x72, 0x1a, 0xe6,
	0x47, 0xd7, 0x6b, 0x5e, 0x21, 0xed, 0x40, 0x24, 0x61, 0xf0, 0x13, 0x87, 0x37, 0x50, 0xe5, 0x9f,
	0x0b, 0x42, 0x85, 0x38, 0x73, 0x32, 0x9b, 0x68, 0x95, 0x45, 0x41, 0xce, 0x65, 0xbd, 0xf6, 0xef,
	0x0a, 0x3a, 0x5c, 0x46, 0xf5, 0x58, 0x14, 0x78, 0x92, 0xca, 0x9e, 0x88, 0xb3, 0x18, 0xbf, 0x46,
	0x6b, 0xa9, 0x9c, 0x85, 0x2c, 0x8f, 0xbe, 0xfd, 0xea, 0xf8, 0xa5, 0x92, 0xfd, 0xa5, 0xa5, 0x9c,
	0x97, 0x4e, 0xbe, 0x12, 0xfe, 0x62, 0x7f, 0x42, 0x72, 0x33, 0xf1, 0x7a, 0x3e, 0xf1, 0xd9, 0x07,
	0x19, 0xaa, 0xca, 0xf6, 0xd1, 0xa3, 0x54, 0x52, 0x49, 0x52, 0x99, 0xf0, 0x68, 0x94, 0x56, 0x57,
	0x4e, 0x57, 0xcf, 0x36, 0x94, 0xbe, 0xb9, 0x95, 0x4f, 0x55, 0x47, 0xab, 0xab, 0xa7, 0xab, 0x67,
	0x6b, 0xb5, 0xd7, 0x85, 0x9e, 0x99, 0x82, 0x0e, 0xc7, 0xad, 0x7e, 0xe3, 0xf3, 0x9e, 0x6d, 0x7d,
	0x62, 0xb7, 0xa5, 0x28, 0xc9, 0x91, 0x8c, 0xa9, 0x1c, 0xe7, 0x1c, 0x37, 0x6a, 0xff, 0xab, 0x14,
	0xb4, 0xe9, 0x47, 0x5c, 0x3a, 0x49, 0xc0, 0x12, 0x8c, 0xd1, 0x03, 0x9e, 0xa6, 0x19, 0x4b, 0xf2,
	0x10, 0xbb, 0x17, 0x2b, 0xdf, 0x7c, 0x8b, 0xbf, 0x47, 0x48, 0x28, 0x90, 0xe4, 0x0d, 0x5d, 0xc9,
	0xa9, 0x1d, 0xcc, 0xa9, 0xa9, 0x3f, 0x59, 0xc4, 0xe5, 0x02, 0xbf, 0xd8, 0xcf, 0x39, 0xf5, 0xbb,
	0xb6, 0x4f, 0x1c, 0xb7, 0x61, 0xb9, 0xa4, 0xeb, 0x74, 0x2d, 0xbc, 0x85, 0xd6, 0x94, 0xd3, 0xa2,
	0x74, 0xc5, 0x72, 0x3e, 0x3f, 0x84, 0x47, 0x01, 0xfb, 0x90, 0x6b, 0xbc, 0x86, 0x0f, 0xd0, 0x16,
	0x7d, 0xc7, 0x43, 0x2e, 0x67, 0x0b, 0x73, 0x3e, 0x39, 0xb8, 0x86, 0xd6, 0x63, 0x91, 0x72, 0x35,
	0x92, 0xd5, 0x07, 0xa7, 0x95, 0xb3, 0xcd, 0x57, 0x30, 0x4f, 0x6d, 0x76, 0xd2, 0xd1, 0x1b, 0x36,
	0x94, 0x22, 0x51, 0xf1, 0x7f, 0xcc, 0x58, 0xc6, 0xaa, 0x0f, 0xf3, 0x6e, 0x1d, 0xa1, 0x9d, 0x94,
	0xfd, 0x98, 0xb1, 0x68, 0xc8, 0x48, 0x94, 0x4d, 0xdf, 0xb1, 0xa4, 0xba, 0xae, 0x62, 0x9d, 0xff,
	0x77, 0x17, 0x1d, 0xe4, 0xaa, 0x9b, 0x63, 0x2a, 0x07, 0x63, 0xc6, 0xc2, 0xce, 0xfc, 0x9a, 0xe0,
	0x5d, 0xb4, 0xf5, 0xb1, 0x21, 0xe6, 0x80, 0x38, 0x13, 0xb8, 0x87, 0xf7, 0xd0, 0x4e, 0xc1, 0x64,
	0xd2, 0x84, 0x41, 0x05, 0x1f, 0x22, 0x5c, 0x30, 0x36, 0x99, 0xac, 0xd3, 0xe1, 0x04, 0x56, 0x70,
	0x15, 0xed, 0x17, 0xec, 0x5d, 0xc6, 0x82, 0x01, 0x4d, 0x82, 0x14, 0x56, 0xb5, 0x30, 0x9e, 0xcc,
	0x22, 0xb8, 0xaf, 0x19, 0x5b, 0x2c, 0x8c, 0x61, 0x4d, 0x33, 0xf6, 0xb2, 0x74, 0x0c, 0x0f, 0xf4,
	0x84, 0x42, 0x04, 0x57, 0xe2, 0x1d, 0x3c, 0xd4, 0xec, 0x1d, 0x9e, 0xa6, 0x3c, 0x1a, 0xc1, 0x3a,
	0x3e, 0x41, 0x87, 0xb7, 0xed, 0xc4, 0x17, 0x31, 0x6c, 0xdc, 0x81, 0x75, 0x78, 0x00, 0x08, 0x3f,
	0x45, 0xc7, 0x25, 0x58, 0x5d, 0x48, 0x29, 0xa6, 0xb0, 0xa9, 0xe9, 0xd3, 0x14, 0xf0, 0x08, 0x1f,
	0xa1, 0xbd, 0x82, 0xc9, 0xce, 0xef, 0x8b, 0x64, 0xb0, 0x85, 0x0f, 0xd0, 0x6e, 0x01, 0xb8, 0x14,
	0x61, 0x28, 0x6e, 0x60, 0x5b, 0xf3, 0x6f, 0x26, 0x22, 0x8b, 0x49, 0x3f, 0x86, 0x1d, 0x7c, 0x8c,
	0x0e, 0x8a, 0x0a, 0xc5, 0x09, 0xa3, 0x01, 0x71, 0x32, 0x09, 0x70, 0x0b, 0x0a, 0xb9, 0x24, 0x97,
	0x34, 0x99, 0xc2, 0xae, 0x96, 0xc5, 0x90, 0x52, 0x35, 0x02, 0x63, 0x8c, 0xb6, 0x0b, 0xe6, 0xba,
	0x5b, 0x87, 0x3d, 0x4d, 0xd8, 0x06, 0x7f, 0xcf, 0x60, 0x5f, 0x73, 0x74, 0x3a, 0x03, 0x38, 0xd0,
	0xba, 0xd8, 0x64, 0x92, 0xb8, 0x8c, 0x06, 0x33, 0x38, 0xd4, 0x42, 0xd4, 0x29, 0x97, 0x70, 0x74,
	0xab, 0x8b, 0x34, 0x84, 0xaa, 0x66, 0xec, 0xd0, 0x88, 0xc2, 0xb1, 0x9e, 0xcc, 0xe9, 0xc0, 0x89,
	0xa6, 0xb8, 0x37, 0xe1, 0x61, 0x48, 0x4c, 0x21, 0xc2, 0x40, 0xdc, 0x44, 0xf0, 0x58, 0xa3, 0xde,
	0x0f, 0x25, 0x5f, 0x14, 0xf3, 0x44, 0x3b, 0x69, 0x45, 0x6c, 0x3a, 0x23, 0x2e, 0x93, 0x59, 0x12,
	0xb1, 0x00, 0x9e, 0x6a, 0x6d, 0x36, 0xc2, 0x70, 0x39, 0x1e, 0xcf, 0x4a, 0x8f, 0xda, 0xd1, 0x50,
	0x4c, 0x15, 0xfc, 0x85, 0x76, 0xd4, 0x8e, 0xde, 0xf3, 0x74, 0xee, 0x04, 0xa7, 0xa5, 0x47, 0x5b,
	0x34, 0x20, 0x6e, 0x16, 0x31, 0x78, 0x5e, 0xda, 0xaa, 0x7c, 0x86, 0x6b, 0xda, 0x49, 0x33, 0x4f,
	0x46, 0x7c, 0x41, 0x9a, 0x34, 0x9a, 0xc0, 0xcf, 0xf0, 0x63, 0x74, 0x54, 0x80, 0x5d, 0x75, 0x73,
	0x53, 0x39, 0x07, 0xbf, 0xc4, 0xa7, 0xe8, 0x49, 0x71, 0x98, 0xf8, 0x68, 0x2c, 0x49, 0x3f, 0x52,
	0xcb, 0xc6, 0x17, 0x37, 0x2c, 0x81, 0x17, 0x5a, 0xe2, 0x06, 0x8b, 0x66, 0x0b, 0xe8, 0x2b, 0x8d,
	0x4e, 0x3d, 0x9b, 0x11, 0x53, 0x64, 0x09, 0x67, 0x09, 0xfc, 0x1c, 0x3f, 0x43, 0x27, 0x45, 0x7d,
	0xe3, 0x51, 0x42, 0x03, 0xb6, 0xc4, 0xcf, 0xb4, 0xa2, 0xd5, 0x8d, 0x26, 0x0d, 0x26, 0xd9, 0x50,
	0x2d, 0x22, 0xf8, 0x1a, 0xd7, 0xd0, 0xb3, 0x02, 0xec, 0x8f, 0x99, 0x12, 0xe3, 0x3d, 0x2b, 0xf8,
	0x9c, 0x6b, 0x23, 0xaa, 0xd2, 0xfb, 0x3d, 0xf8, 0x05, 0x7e, 0x82, 0xaa, 0x9f, 0xf1, 0xcd, 0xd2,
	0x4f, 0x79, 0x7f, 0xa9, 0x1d, 0x6a, 0xb0, 0x1b, 0x9a, 0x04, 0xf0, 0x8d, 0x26, 0x52, 0x3d, 0xe3,
	0x61, 0x90, 0x5f, 0x5e, 0x36, 0x81, 0x97, 0x5a, 0xc4, 0x25, 0xd8, 0xe3, 0x31, 0x83, 0x5f, 0xe9,
	0x83, 0xa6, 0x2e, 0x0a, 0x31, 0xa2, 0x80, 0xf4, 0xb2, 0x30, 0x84, 0x5f, 0xdf, 0x5a, 0x3b, 0x61,
	0x08, 0xdf, 0x6a, 0xeb, 0x45, 0x19, 0xd5, 0x80, 0xbc, 0xc2, 0xfb, 0x08, 0xf4, 0x58, 0xf0, 0x1b,
	0xed, 0x6a, 0x5f, 0x65, 0xd1, 0x28, 0x77, 0xff, 0xad, 0x46, 0xc6, 0x15, 0xe9, 0x98, 0x46, 0xf0,
	0x3b, 0x7d, 0x42, 0x7f, 0xf8, 0x81, 0x27, 0x53, 0x2a, 0xd5, 0xbd, 0xfc, 0xbd, 0x56, 0xce, 0x40,
	0xdd, 0xb4, 0x3f, 0x68, 0x69, 0x7b, 0x34, 0x4b, 0x19, 0xfc, 0x51, 0xd3, 0xc4, 0xcc, 0x92, 0x84,
	0x45, 0x92, 0xf8, 0x7c, 0xca, 0xe0, 0x3b, 0x2d, 0x87, 0x39, 0x66, 0xc3, 0x49, 0x3e, 0xaa, 0x29,
	0x5c, 0xe8, 0xb3, 0x3a, 0x15, 0x13, 0x36, 0x9f, 0xb7, 0x3f, 0x69, 0xe9, 0x9b, 0xed, 0xd6, 0x25,
	0xfc, 0x59, 0x33, 0x76, 0xf9, 0x90, 0xc1, 0x5f, 0x34, 0x6e, 0xfe, 0x98, 0x46, 0x93, 0x14, 0x5e,
	0xeb, 0x0a, 0x89, 0x24, 0x99, 0xc1, 0xf7, 0x5a, 0xc6, 0xae, 0x20, 0x4d, 0xfe, 0x9e, 0xa9, 0xf5,
	0xf7, 0x57, 0xad, 0x79, 0x57, 0x59, 0x2a, 0x49, 0x8b, 0xc6, 0x31, 0x53, 0x97, 0xd9, 0xd0, 0x38,
	0x36, 0xe9, 0x94, 0x11, 0x3b, 0x25, 0x2d, 0x35, 0x14, 0x75, 0x4d, 0xf7, 0x2e, 0xbb, 0x21, 0x1d,
	0x26, 0x29, 0x98, 0x5a, 0x6d, 0x9d, 0x19, 0xa9, 0xd3, 0x00, 0x1a, 0x7a, 0x3b, 0xd8, 0x28, 0x61,
	0x12, 0x2c, 0xad, 0x64, 0x97, 0x85, 0xf4, 0x03, 0x5c, 0x96, 0xbf, 0x16, 0x2d, 0x96, 0x08, 0x68,
	0xde, 0xba, 0xb2, 0xf3, 0xdd, 0x93, 0x83, 0x2d, 0xfd, 0xad, 0x68, 0x82, 0xad, 0xab, 0xda, 0x1c,
	0xf4, 0xe0, 0x4a, 0xdf, 0xe0, 0x61, 0xa8, 0x7c, 0xaf, 0x35, 0x52, 0x73, 0xf3, 0xa0, 0x07, 0x6d,
	0xad, 0xa0, 0xc1, 0x98, 0x4a, 0xb5, 0x44, 0xea, 0xd9, 0x0c, 0x3a, 0x9a, 0x88, 0xf6, 0x54, 0xd5,
	0x94, 0x30, 0x2a, 0xd5, 0x18, 0x76, 0x35, 0xd4, 0x8b, 0xe9, 0x90, 0x11, 0x53, 0xc1, 0x2c, 0x00,
	0x47, 0xab, 0x63, 0x30, 0x16, 0x22, 0x4e, 0xa1, 0xa7, 0x2d, 0x88, 0x7c, 0xa5, 0x10, 0x39, 0x66,
	0x11, 0xc9, 0x9f, 0xfc, 0xbf, 0xe1, 0xe7, 0xe8, 0xe9, 0x67, 0x4f, 0x42, 0x92, 0xd0, 0xe1, 0x24,
	0x2d, 0xb8, 0xb8, 0xf8, 0x0b, 0xf4, 0xf8, 0xb3, 0x59, 0x4e, 0x82, 0xc5, 0x8b, 0x3a, 0x5f, 0x9a,
	0x9e, 0x56, 0x58, 0xee, 0xe0, 0x8b, 0x78, 0x8e, 0xfa, 0x9a, 0x12, 0x7f, 0x67, 0x59, 0xaa, 0xde,
	0x01, 0xe8, 0x9f, 0x27, 0x68, 0xaf, 0xe4, 0x9b, 0xb2, 0xf8, 0x7c, 0x15, 0xbf, 0x2a, 0xe1, 0x5e,
	0x91, 0xa2, 0x42, 0xea, 0x34, 0xe5, 0x43, 0xa8, 0x14, 0x1b, 0xaf, 0xcc, 0x3d, 0x11, 0x86, 0xb0,
	0xa2, 0x5b, 0x9b, 0x09, 0x0f, 0x60, 0xf5, 0xfc, 0x3f, 0x1b, 0x68, 0x47, 0xfb, 0xda, 0x53, 0x09,
	0xcb, 0xbe, 0xf7, 0xe0, 0x1e, 0xfe, 0x12, 0x9d, 0xea, 0x48, 0xc7, 0x79, 0x63, 0x11, 0xdf, 0x21,
	0x3d, 0xc7, 0xb3, 0x7d, 0xdb, 0xe9, 0x42, 0x45, 0x2d, 0xd1, 0xbb, 0xbc, 0x7c, 0xc3, 0x6d, 0x5a,
	0x3e, 0xac, 0x28, 0x0d, 0x75, 0x1f, 0xc3, 0xf7, 0x0d, 0xf3, 0x3a, 0x77, 0x85, 0x55, 0xd5, 0x87,
	0x3b, 0x1c, 0x16, 0x31, 0xee, 0x97, 0xb9, 0x98, 0x86, 0xe7, 0x7f, 0x2a, 0x65, 0xad, 0x2c, 0x4d,
	0xee, 0xb2, 0x88, 0xf1, 0xa0, 0x8c, 0x51, 0xc1, 0x81, 0xf8, 0xae, 0x65, 0xc1, 0xc3, 0x32, 0x46,
	0xb9, 0x57, 0x77, 0xc9, 0x68, 0xfd, 0xee, 0x54, 0x4e, 0xb3, 0xd9, 0xb6, 0x60, 0xa3, 0xac, 0xdc,
	0x96, 0xd3, 0x6e, 0x7c, 0x2a, 0x17, 0x95, 0xb9, 0xf8, 0xae, 0x61, 0x77, 0x89, 0x51, 0xb7, 0xdb,
	0xb6, 0xff, 0x16, 0x36, 0xd5, 0xda, 0xd7, 0x5d, 0x1a, 0xae, 0xd3, 0x23, 0xb6, 0x6f, 0x75, 0xe0,
	0x51, 0x19, 0xdc, 0xb4, 0xdf, 0x58, 0x73, 0x78, 0xab, 0xac, 0xc8, 0x9e, 0x6d, 0x5e, 0xf7, 0x17,
	0xe7, 0xb7, 0x7f, 0xc2, 0xc1, 0xed, 0x77, 0x2d, 0xd8, 0x29, 0x2b, 0xb1, 0xd7, 0x77, 0xcd, 0x96,
	0xe1, 0x2d, 0x92, 0x40, 0x59, 0x0d, 0x9e, 0xd5, 0x6e, 0xcf, 0xe1, 0xdd, 0x32, 0xc9, 0x1b, 0xb6,
	0x67, 0x78, 0x9e, 0xd5, 0xa9, 0xb7, 0x17, 0x41, 0x70, 0x59, 0x90, 0x7c, 0x88, 0x72, 0x78, 0xef,
	0xee, 0xbe, 0xe5, 0x6a, 0x13, 0xa3, 0xef, 0x3b, 0xb0, 0x5f, 0x36, 0xc9, 0x9e, 0xef, 0xf4, 0xe0,
	0x40, 0x6d, 0xee, 0x5b, 0x4a, 0x1b, 0xfd, 0xae, 0x0f, 0x87, 0x6a, 0x0b, 0xea, 0x50, 0xbd, 0xff,
	0xb6, 0x6e, 0x98, 0xd7, 0x70, 0x54, 0x76, 0xae, 0xd9, 0x7e, 0xdb, 0x6b, 0x41, 0x15, 0x7f, 0x8d,
	0x5e, 0xe8, 0x90, 0x75, 0x65, 0x99, 0x7e, 0x5e, 0x32, 0xb9, 0x74, 0x9d, 0x0e, 0xf1, 0x7c, 0xc3,
	0x6b, 0xc1, 0x71, 0x19, 0xb9, 0xbc, 0xfa, 0x5c, 0xe3, 0x13, 0xf5, 0x75, 0x74, 0xbb, 0x09, 0xdd,
	0xe6, 0x72, 0x0a, 0x1e, 0xe3, 0x17, 0xe8, 0xf9, 0x5d, 0x57, 0xac, 0x61, 0xbb, 0x96, 0x99, 0xcf,
	0xd3, 0x13, 0xb5, 0x5b, 0x6f, 0x05, 0x32, 0x7c, 0xd7, 0x69, 0xc3, 0x53, 0x7c, 0x8e, 0xbe, 0xd2,
	0xb1, 0x37, 0x96, 0xe9, 0x3b, 0xee, 0xc7, 0xd9, 0x5f, 0xce, 0xe5, 0xb3, 0x32, 0xd6, 0xae, 0xd1,
	0x30, 0x5c, 0xf8, 0xa2, 0x8c, 0xb5, 0x67, 0x2d, 0x38, 0x9b, 0x4e, 0xa7, 0x6e, 0x77, 0x2d, 0xd2,
	0x76, 0xcc, 0x6b, 0x38, 0x55, 0x6b, 0xf1, 0x16, 0x6b, 0xa7, 0xeb, 0xdb, 0xdd, 0xbe, 0x05, 0xcf,
	0xeb, 0x6b, 0xad, 0xca, 0xbf, 0x2a, 0xf7, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x25, 0x2d,
	0x49, 0xee, 0x10, 0x00, 0x00,
}
